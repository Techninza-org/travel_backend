// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  username          String?     @unique
  phone             String?     @unique
  password          String
  email             String?     @unique
  image             String?
  highlights        Highlight[]
  background_image  String?
  gender            Int? // 0 = female, 1 = male
  date_of_birth     String?
  bio               String?
  emergency_name    String?
  emergency_phone   String?
  latitude          Float?
  longitude         Float?
  is_verified       Boolean     @default(false)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  otp               Otp?
  trips             Trip[]
  expense           Expense[]
  userReferralCode  String?
  referredByCode    String?
  status            Boolean     @default(false)
  typeOfTraveller   Int?        @default(1) // 0 = solo, 1 = group
  visible           Boolean     @default(true)
  registrationToken String?
  fb_access_token   String?
  isAdmin           Boolean     @default(false)

  post               Post[]
  Comment            Comment[]
  follows            Follows[]          @relation(name: "FollowerUser")
  followers          Follows[]          @relation(name: "UserFollows")
  customTrips        CustomTrip[]
  forumQuestions     ForumQuestion[]
  answers            ForumAnswer[]      @relation("UsersAnswer")
  blocked            Block[]            @relation(name: "BlockedUser")
  blockedBy          Block[]            @relation(name: "UserBlock")
  followRequest      FollowRequest[]    @relation(name: "FollowRequestUser")
  followerRequest    FollowRequest[]    @relation(name: "FollowRequestFollower")
  sender             Message[]          @relation("sender")
  receiver           Message[]          @relation("receiver")
  participated       Participant[]
  pinnedLocations    PinnedLocation[]
  kyc                KYC?
  kycStatus          Int?               @default(-1) // -1 = not submitted, 0 = submitted, 1 = accepted
  isSocialLogin      Boolean            @default(false)
  pushNotifications  Boolean            @default(true)
  transactions       Transactions[]
  requestsTravellers RequestTraveller[]
  itineraryMembers   Itinerary[]        @relation("ItineraryMembers")

  itineraries      Itinerary[]
  liabilityExpense Expense[]   @relation("ExpenseAddedUser") //*

  friendTravelRequestsSent     friendTravelRequest[] @relation("FriendRequestSender")
  friendTravelRequestsReceived friendTravelRequest[] @relation("FriendRequestReceiver")
  CustomExpenseTrips           CustomExpenseTrip[]
  CustomExpenses               CustomExpense[]
  CustomExpense                CustomExpense[]       @relation("CustomExpenseAddedUser")
  UserHotelBookings            UserHotelBooking[]
}

model PackageCategory {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model PackageState {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model PackageCountry {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Package {
  id          Int      @id @default(autoincrement())
  type        Int  // 0 = india, 1 = international
  category    String
  name        String
  state       String?
  city        String?
  country     String?
  description String   @db.Text
  images      Json
  price       Int
  tax         Int
  days        Int
  nights      Int
  itinerary   Json
  destination_guide   Json
  inclusions Json
  exclusions Json
  highlights Json
  cancellation_policy Json
  date_change_policy Json
  quotes   Quote[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model UserHotelBooking {
  id         Int      @id @default(autoincrement())
  user_id    Int
  hotel_name String
  check_in   DateTime
  check_out  DateTime
  room_type  String
  amount     Int
  booking_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RequestTraveller {
  id                  Int                   @id @default(autoincrement())
  user_id             Int
  // destination_id      Int
  destinationName       String?
  destination_latitude  Float?
  destination_longitude Float?
  gender              Int //0 any, 1 male, 2 female
  date                DateTime?
  end_date            DateTime?
  count               Int?
  date_type           Int //0 flexible, 1 fixed
  traveler_type       String //0 solo, 1 group
  budget_type         Int //0 backpacking, 1 premium

  usersClicked        Json? // user ids who clicked on this request

  description         String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  // destination         Destination           @relation(fields: [destination_id], references: [id], onDelete: Cascade)
  user                User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  friendTravelRequest friendTravelRequest[]
}

model friendTravelRequest {
  id              Int              @id @default(autoincrement())
  senderId        Int
  receiverId      Int
  travelRequestId Int
  status          Int              @default(0) //0 pending, 1 accepted, 2 rejected
  sender          User             @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User             @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  travelRequest   RequestTraveller @relation(fields: [travelRequestId], references: [id])
  created_at      DateTime         @default(now())
}

model Transactions {
  id           Int      @id @default(autoincrement())
  user_id      Int
  amount       Int
  status       String
  order_id     String
  type         String?
  ezi_order_id String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model KYC {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  name            String
  address         String
  phone           String
  alternate_phone String?
  email           String
  alternate_email String?
  document_type   String?
  document        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Block {
  id         Int      @id @default(autoincrement())
  user_id    Int
  blocked_id Int
  user       User     @relation(name: "UserBlock", fields: [user_id], references: [id], onDelete: Cascade)
  blocked    User     @relation(name: "BlockedUser", fields: [blocked_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Otp {
  id         Int      @id @default(autoincrement())
  otp        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id          Int          @id @default(autoincrement())
  image       String?
  description String?
  media_type  MediaType    @default(IMAGE)
  likes       Int          @default(0)
  comment     Comment[]
  user_id     Int
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  latitude    String?
  longitude   String?
  place       String?
  thumbnail   String?
  duration    String?
  postReport  PostReport[]
  // transitionData TransitionData[]
  soundName   String?
  filterName  FilterName[]
  transitions Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Likes      Likes[]
}

enum MediaType {
  IMAGE
  VIDEO
  TEMPLATE
}

model Comment {
  id         Int      @id @default(autoincrement())
  comment    String
  postId     Int
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Likes {
  id      Int @id @default(autoincrement())
  post_id Int
  user_id Int

  Post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  id          Int      @id @default(autoincrement())
  user_id     Int
  follower_id Int
  follower    User     @relation(name: "FollowerUser", fields: [follower_id], references: [id], onDelete: Cascade)
  user        User     @relation(name: "UserFollows", fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Service {
  id                   Int          @id @default(autoincrement())
  name                 String
  description          String       @db.Text
  destination          String?
  duration             Int
  services             Json?
  terms_and_conditions String?
  itinerary            Json?
  images               Json?
  rating               Float        @default(0)
  rating_count         Int          @default(0)
  price                Int
  offer_price          Int?
  active               Boolean      @default(true)
  trip                 Trip[]
  host_id              Int
  host                 Host         @relation(fields: [host_id], references: [id])
  isBookmarked         Boolean      @default(false)
  //group
  type                 Int          @default(0) //0 default, 1 group, 2 custom
  start_date           String?
  end_date             String?
  pickups              Json?
  total_seats          Int?
  available_seats      Int?
  //custom
  customTrips          CustomTrip[]
  number_of_people     Int?
  custom_trip_id       Int?
  user_id              Int?
  status               Int          @default(0) // 0 = pending, 1 = accepted, 2 = rejected

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trip {
  id                   Int       @id @default(autoincrement())
  user_id              Int
  destination          String
  number_of_people     Int
  start_date           String
  end_date             String
  service_id           Int?
  cost                 Int
  host_id              Int
  is_payment_confirmed Boolean   @default(false)
  cancelled            Boolean   @default(false)
  status               String    @default("upcoming")
  isBookmarked         Boolean   @default(false)
  expense              Expense[]
  host                 Host      @relation(fields: [host_id], references: [id])
  order_id             String?
  ezi_order_id         String?
  tripMembers          Json?

  service    Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CustomTrip {
  id                   Int       @id @default(autoincrement())
  user_id              Int
  number_of_people     Int
  start_date           String
  end_date             String
  duration             Int
  itinerary            Json
  service_id           Int?
  cost                 Int?
  host_id              Int?
  tripMembers          Json?
  is_payment_confirmed Boolean   @default(false)
  cancelled            Boolean   @default(false)
  status               String    @default("upcoming")
  booked               Boolean   @default(false)
  isBookmarked         Boolean   @default(false)
  expense              Expense[]
  host                 Host?     @relation(fields: [host_id], references: [id])

  service    Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Expense {
  id           Int     @id @default(autoincrement())
  user_id      Int
  amount       Int
  category     String
  note         String?
  trip_id      Int
  customTripId Int?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  splitWithUserIds Json?
  usersData        Json?
  isSplitDone      Boolean? @default(false)
  isSettled        Boolean? @default(false)

  addedUsers User[]      @relation("ExpenseAddedUser") //*
  trip       Trip        @relation(fields: [trip_id], references: [id])
  customTrip CustomTrip? @relation(fields: [customTripId], references: [id])
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model CustomExpenseTrip {
  id             Int             @id @default(autoincrement())
  user_id        Int
  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name           String
  customExpenses CustomExpense[]
  created_at     DateTime        @default(now())
}

model CustomExpense {
  id                     Int     @id @default(autoincrement())
  user_id                Int
  amount                 Int
  category               String
  note                   String?
  custom_expense_trip_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  splitWithUserIds Json?
  usersData        Json?
  isSplitDone      Boolean? @default(false)
  isSettled        Boolean? @default(false)

  addedUsers          User[]            @relation("CustomExpenseAddedUser")
  custom_expense_trip CustomExpenseTrip @relation(fields: [custom_expense_trip_id], references: [id])
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
}

model Destination {
  id                Int                @id @default(autoincrement())
  destination       String
  pincode           String
  description       String?
  image             String?
  features          Json?
  customise_options Json?
  latitude          Float?
  longitude         Float?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
}

model Host {
  id                  Int                  @id @default(autoincrement())
  type                String               @default("host")
  username            String               @unique
  password            String
  name                String
  description         String?
  google_rating       Float?
  google_rating_photo String?
  phone               String
  email               String?
  photo               String?
  trips               Trip[]
  services            Service[]
  customTrips         CustomTrip[]
  kyc                 VendorKyc?
  notifs              VendorNotification[]
  submitted           Boolean              @default(false)
  verified            Boolean              @default(false)
  created_at          DateTime             @default(now())
}

enum QuoteSource{
  WEBSITE
  APP
}

model Quote {
  id               Int     @id @default(autoincrement())
  done             Boolean @default(false)
  packageId        Int
  package          Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  number_of_people Int
  start_date       String
  name             String
  phone            String
  source           QuoteSource?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model VendorNotification {
  id         Int      @id @default(autoincrement())
  host_id    Int
  title      String
  isRead     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  host       Host     @relation(fields: [host_id], references: [id], onDelete: Cascade)
}

model VendorKyc {
  id         Int      @id @default(autoincrement())
  host_id    Int      @unique
  gst        String
  coi        String?
  image      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  host Host @relation(fields: [host_id], references: [id], onDelete: Cascade)
}

model KycNotification {
  id         Int      @id @default(autoincrement())
  host_id    Int
  notif      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentOrder {
  id         Int      @id @default(autoincrement())
  amount     Int
  user_id    Int
  serviceId  Int
  created_at DateTime @default(now())
}

model FAQ {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ForumQuestion {
  id          Int           @id @default(autoincrement())
  question    String        @db.Text
  answers     ForumAnswer[] @relation("QuestionToAnswer")
  user_id     Int
  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location    String?
  latitude    Float?
  longitude   Float?
  likes       QLikes[]
  forumReport forumReport[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model ForumAnswer {
  id          Int           @id @default(autoincrement())
  answer      String        @db.Text
  question_id Int
  question    ForumQuestion @relation("QuestionToAnswer", fields: [question_id], references: [id], onDelete: Cascade)
  user_id     Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  User        User?         @relation("UsersAnswer", fields: [user_id], references: [id], onDelete: Cascade)
}

model QLikes {
  id          Int           @id @default(autoincrement())
  question_id Int
  user_id     Int
  question    ForumQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowRequest {
  id          Int      @id @default(autoincrement())
  user_id     Int
  follower_id Int
  status      Int      @default(0) // 0 = pending, 1 = accepted, 2 = rejected
  user        User     @relation(name: "FollowRequestUser", fields: [user_id], references: [id], onDelete: Cascade)
  follower    User     @relation(name: "FollowRequestFollower", fields: [follower_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

enum ConversationType {
  ONE_ON_ONE
  GROUP
}

model Message {
  id              Int          @id @default(autoincrement())
  message         String
  user_id         Int
  receiver_id     Int?
  conversation_id Int
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  sender          User         @relation("sender", fields: [user_id], references: [id], onDelete: Cascade)
  receiver        User?        @relation("receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
}

model Conversation {
  id           Int              @id @default(autoincrement())
  name         String?
  type         ConversationType @default(ONE_ON_ONE)
  participants Participant[]
  messages     Message[]
  created_at   DateTime         @default(now())
  updated_at   DateTime         @default(now()) @updatedAt
}

model Participant {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  isAdmin        Boolean?     @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
}

model SuperAdmin {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  phone      String
  created_at DateTime @default(now())
}

model PinnedLocation {
  id         Int      @id @default(autoincrement())
  user_id    Int
  latitude   Float
  longitude  Float
  title      String?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}

model PostReport {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}

model forumReport {
  id          Int           @id @default(autoincrement())
  question_id Int
  user_id     Int
  question    ForumQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ServiceOptions {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
}

model FilterName {
  id     Int    @id @default(autoincrement())
  name   String
  t1     String
  t2     String
  t3     String
  t4     String
  t5     String
  t6     String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id             Int      @id @default(autoincrement())
  sender_id      Int
  sender_profile String
  receiver_id    Int
  title          String
  message        String
  type           String?
  type_id        String?
  isRead         Boolean  @default(false)
  created_at     DateTime @default(now())
}

model Blog {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String   @db.Text
  description String   @db.Text
  image       String?
  meta        String?  @db.Text
  keywords    String?
  category    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Highlight {
  id         Int            @id @default(autoincrement())
  title      String
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  latitude   Float?
  longitude  Float?
  postIds    Json?
  location   String?
  image      String?
  media      HighlightImg[]
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
}

model HighlightImg {
  id           Int       @id @default(autoincrement())
  highlight_id Int
  highlight    Highlight @relation(fields: [highlight_id], references: [id], onDelete: Cascade)
  image        String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Itinerary {
  id Int @id @default(autoincrement())

  user_id        Int?
  user           User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  members        User[]  @relation("ItineraryMembers")
  start_lat_long String?
  end_lat_long   String?
  start_city     String?
  end_city       String?
  cover_img      String?

  status       ItineraryStatus @default(NOT_ASIGNED)
  city_details ItineraryCity[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ItineraryCity {
  id Int @id @default(autoincrement())

  itinerary_id Int?
  itinerary    Itinerary? @relation(fields: [itinerary_id], references: [id], onDelete: Cascade)

  imges_url CityImg[]

  city_name   String
  lat_long    String
  title       String?
  description String?
  hotel          String?
  transport      String?
  places_visited  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CityImg {
  id Int @id @default(autoincrement())

  iterary_city_id Int?
  itineraryCity   ItineraryCity? @relation(fields: [iterary_city_id], references: [id], onDelete: Cascade)

  image_url String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CityDescription {
  id Int @id @default(autoincrement())

  name        String @unique
  description String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum ItineraryStatus {
  START
  MOVING
  END
  NOT_ASIGNED
}

model Query {
  id         Int      @id @default(autoincrement())
  name       String?
  email      String?
  phone      String
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Airport {
  id            Int      @id @default(autoincrement())
  airportCode   String
  airportName   String
  cityName      String
  cityCode      String
  country       String
  continentCode String?
  countryCode   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}
