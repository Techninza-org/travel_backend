// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  phone         String    @unique
  password      String
  image         String?
  gender        Int? // 0 = female, 1 = male
  date_of_birth DateTime?
  bio           String?
  latitude      Float?
  longitude     Float?
  is_verified   Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  otp           Otp?
  trips         Trip[]
  expense       Expense[]

  post       Post[]
  Comment    Comment[]
  Follows_by Follows[]
}

model Otp {
  id         Int      @id @default(autoincrement())
  otp        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  image       String
  description String?
  media_type  MediaType @default(IMAGE)
  likes       Int       @default(0)
  comment     Comment[]
  user_id     Int
  user        User      @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Likes      Likes[]
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id         Int      @id @default(autoincrement())
  comment    String
  postId     Int
  Post       Post     @relation(fields: [postId], references: [id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Likes {
  id      Int @id @default(autoincrement())
  post_id Int
  user_id Int

  Post Post @relation(fields: [post_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  id          Int @id @default(autoincrement())
  user_id     Int
  follower_id Int

  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  host_id     Int
  pincode     Int
  rating      Float  @default(0)
  price       Int
  duration    Int
  trip        Trip[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trip {
  id               Int       @id @default(autoincrement())
  user_id          Int
  destination      String
  number_of_people Int
  pincode          Int
  start_date       String
  end_date         String
  service_id       Int
  expense          Expense[]

  service    Service  @relation(fields: [service_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Expense {
  id       Int     @id @default(autoincrement())
  user_id  Int
  amount   Int
  category String
  note     String?
  trip_id  Int

  user       User     @relation(fields: [user_id], references: [id])
  trip       Trip     @relation(fields: [trip_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
