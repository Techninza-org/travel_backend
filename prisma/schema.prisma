// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String?   @unique
  phone            String?   @unique
  password         String
  email            String?   @unique
  image            String?
  gender           Int? // 0 = female, 1 = male
  date_of_birth    String?
  bio              String?
  emergency_name   String?
  emergency_phone  String?
  latitude         String?
  longitude        String?
  is_verified      Boolean   @default(false)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  otp              Otp?
  trips            Trip[]
  expense          Expense[]
  userReferralCode String?
  referredByCode   String?
  status           Boolean   @default(false)
  typeOfTraveller  Int?      @default(1) // 0 = solo, 1 = group

  post      Post[]
  Comment   Comment[]
  follows   Follows[] @relation(name: "FollowerUser")
  followers Follows[] @relation(name: "UserFollows")
}

model Otp {
  id         Int      @id @default(autoincrement())
  otp        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  image       String
  description String?
  media_type  MediaType @default(IMAGE)
  likes       Int       @default(0)
  comment     Comment[]
  user_id     Int
  user        User      @relation(fields: [user_id], references: [id])
  latitude    String?
  longitude   String?
  place       String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Likes      Likes[]
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id         Int      @id @default(autoincrement())
  comment    String
  postId     Int
  Post       Post     @relation(fields: [postId], references: [id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Likes {
  id      Int @id @default(autoincrement())
  post_id Int
  user_id Int

  Post Post @relation(fields: [post_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  id          Int      @id @default(autoincrement())
  user_id     Int
  follower_id Int
  follower    User     @relation(name: "FollowerUser", fields: [follower_id], references: [id])
  user        User     @relation(name: "UserFollows", fields: [user_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Service {
  id              Int     @id @default(autoincrement())
  name            String
  description     String
  destination     String
  duration        Int
  services        Json
  itinerary       Json
  images          Json?
  rating          Float   @default(0)
  price           Int
  trip            Trip[]
  host_id         Int
  host            Host    @relation(fields: [host_id], references: [id])
  //group
  type            Int     @default(0) //0 default, 1 group, 2 custom
  start_date      String?
  end_date        String?
  pickups         Json?
  total_seats     Int?
  available_seats Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trip {
  id               Int       @id @default(autoincrement())
  user_id          Int
  destination      String
  number_of_people Int
  start_date       String
  end_date         String
  service_id       Int?
  cost             Int
  host_id          Int
  isBookmarked     Boolean   @default(false)
  expense          Expense[]
  host             Host      @relation(fields: [host_id], references: [id])

  service    Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Expense {
  id       Int     @id @default(autoincrement())
  user_id  Int
  amount   Int
  category String
  note     String?
  trip_id  Int

  user       User     @relation(fields: [user_id], references: [id])
  trip       Trip     @relation(fields: [trip_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Destination {
  id                Int      @id @default(autoincrement())
  destination       String
  pincode           String
  description       String?
  image             String?
  features          Json?
  customise_options Json?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Host {
  id                  Int       @id @default(autoincrement())
  type                String    @default("host")
  username            String    @unique
  password            String
  name                String
  description         String?
  google_rating       Float?
  google_rating_photo String?
  phone               String
  email               String?
  photo               String?
  trips               Trip[]
  services            Service[]
  created_at          DateTime  @default(now())
}
